GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 1
A branch and bound problem
C o m p i l a t i o n


   3  *cnstr_15 and cnstr_19 are infeasible and I hypothesize it's due to not setting initial virtual positions!
   4  Scalars
   5   
   6          S_Q "switch time for qc between two containers" /2/ !! This is temporarily assumed constant
   7          x /1/
   8          y /1/
   9          x_R /10/
  10          y_R /14/
  11          y_r1 /10/ !! these should be rewritten with $set and %inside sets!
  12          v "AGV speed" /4/
  13          Mnum "a very large number" /10000000/;
  14   
  15  Sets
  16   
  17          i "container index" /i0*i4/
  18          j(i) "a duplicate of i" /#i/ !!this is temporary, a better is to write /#i/
  19          id(i) "last container" /i4/
  20   
  21          m   "QC index" /m0,m1,m2,m3,m4/
  22          n(m)   "A duplicate of j" /#m/ !!this is temporary, a better is to write /#m/
  23   
  24   
  25          li "AGV index" /l1*l2/
  26          Bs(li) "set of all agvs" /#li/
  27   
  28  *       0 in a is a virtual starting point
  29          a   "AGV actions" /a0*a4/
  30   
  31          XR  "Vertical Operational Area" /1*14/
  32          YR  "Horizontal Operational Area" /1*14/
  33          YS(YR)  "Horizontal Seaside Operation Area" /11*14/
  34          YL(YR)  "Horizontal Path" /1*10/
  35   
  36   
  37          o(m,i,XR) /m1.i1.1, m2.i2.3, m3.i3.5, m4.i4.8/ !! if m_4 < m_5 (i.e. 4<5), set i_i < i_j (i.e. i<j)
  38          A_L(m,i,XR) /m1.i1.2, m2.i2.4, m3.i3.1, m4.i4.5 /
  39          A_R(m,i,XR) /m1.i1.8, m2.i2.7, m1.i1.10, m1.i1.6 /
  40   
  41   
  42          L(m,i)   /m1.i1 , m2.i2/ !! these are stored in ASC storage area, waiting to be placed in the ship by the QC
  43          D(m,i) "Unloading Containers. U is a subset of index i" /m3.i3, m4.i4/ !! these are in the ships, waiting to be taking to ASCs
  44          C(m,i)  "All  Containers" /m1.i1 , m2.i2, m3.i3, m4.i4/ !! this is in data file, this should contain 0 node, too!
  45          Cd(m,i) "the last QC container job" /m4.i4/
  46  *       C_prime(i) "The set of containers to be assigned"
  47   
  48          WT(m,i,a) "set of total actions" /m1.i1.a0,m2.i2.a0,m3.i3.a0,m4.i4.a0,      m1.i1.a2, m2.i2.a2, m3.i3.a2, m4.i4.a2,     m1.i1.a1, m1.i1.a3, m2.i2.a1, m2.i2.a3, m3.i3.a1, m3.i3.a3, m3.i3.a4, m4.i4.a1, m4.i4.a3, m4.i4.a4/
  49          WV(m,i,a)  "Vertical Actions" /m1.i1.a2, m2.i2.a2, m3.i3.a2, m4.i4.a2/ !! those containing a2. Note that this set includes all the containers (m,i) in C(m,i)
  50          WH(m,i,a)  "Horizontal Actions" /m1.i1.a0,m2.i2.a0,m3.i3.a0,m4.i4.a0,  m1.i1.a1, m1.i1.a3, m2.i2.a1, m2.i2.a3, m3.i3.a1, m3.i3.a3, m3.i3.a4, m4.i4.a1, m4.i4.a3, m4.i4.a4 / !! those containing a1,a3,a4. Be sure to include virtual a0 in it.
  51   
  52  *       or psi_1(m,i,m,i)?
  53  *very challenging set!
  54          psi_1(m,i,m,i)   "Scnstruence of Container jobs for QC" /m3.i3.m4.i4/ !!This is in data file. This identifies the container job scnstruence, (in a form of 2d graph?)idk
  55          psi_2(m,i,m,i)   "Scnstruence of Container jobs for ASC" /m1.i1.m2.i2/ !!This is in data file.
GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 2
A branch and bound problem
C o m p i l a t i o n


  56          ;
  57  *O(YR) $(C(m,i)) = yes;
  58  alias(XR, XR_1);
  59  alias(YR, YR_1);
  60  alias (a,a1);
  61  alias (a,a2);
  62  alias (a2,a2_1);
  63  alias (a1,a1_1);
  64  alias (i,i1);
  65  set h(n)/#m/;  !! for cnstr_3
  66  set k(j) /#i/;
  67  set s(YR);
  68  set XR2(XR) /#XR/;
  69  set x_t(XR) /#XR/;
  70   
  71  Parameters
  72          o1(m,i) "merely a copy of the o(m,i,XR), with XR treated as a number" /m1.i1 2, m2.i2 3/
  73          G_Q(m,i) /m1.i1 1, m2.i2 1, m3.i3 1, m4.i4 1/ !! seems to be constant for all container jobs, bc of const 24
  74          G_Y(m,i) /m1.i1 1, m2.i2 1, m3.i3 1, m4.i4 1/
  75          ;
  76   
  77  Binary Variables
  78   
  79          z(m, i, m, i, li)   "used mainly for handling QC double cycling, it consists of 0 virtual point!"
  80          U_AGV(m,i,a,m,i,a)  "U_AGV(j_1,j_2) conducted before"
  81          U_QC(m,i,m,i,a)   "U_QC(j,WT) conducted before"
  82   
  83  *       "Path related variables
  84          P_X(m,i,a,XR) "P_X(WV,x) finish V loc, These are defined on actions, NOT ON CONTAINERS!"
  85          P_Y(m,i,a,YR) "P_Y(WH,y) finish H loc, These are defined on actions, NOT ON CONTAINERS!"
  86          P_X0(m,i,a,XR) "P_X(WV,x) Start H loc, These are defined on actions, NOT ON CONTAINERS!"
  87          P_Y0(m,i,a,YR) "P_Y(WH,y) Start H loc, These are defined on actions, NOT ON CONTAINERS!"
  88          ;
  89   
  90  Positive Variables
  91   
  92  *       Time related variables
  93          T_Q(m,i) "start time of QC"
  94          T_Y(m,i) "Start time of agv putting cont on ASC"
  95          T_start(m,i,a) "Start of agv for action (m,i,a)"
  96   
  97   
  98  *       Auxiliary Variables
  99          t_AGV(m,i,a,m,i,a)        "t_AGV(WT_1,WT_2"
 100          X_position(m,i,a)   "X_position(WT)"
 101          Y_position(m,i,a)   "Y_position(WT)"
 102   
 103          ;
 104  variable obj "objective function";
 105   
 106  *binary variables initial values
 107  z.up(m,i,n,j,li) $(c(m,i) and c(n,j)) = 1;
 108  z.lo(m,i,n,j,li) $(c(m,i) and c(n,j)) = 0;
GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 3
A branch and bound problem
C o m p i l a t i o n


 109  U_AGV.up(m,i,a1,n,j,a2) $(wt(m,i,a1) and wt(n,j,a2)) = 1;
 110  U_AGV.lo(m,i,a1,n,j,a2) $(wt(m,i,a1) and wt(n,j,a2)) = 0;
 111  U_QC.up(m,i,n,j,a) $(c(m,i) and wh(n,j,a)) = 1;
 112  U_QC.lo(m,i,m,i,a) $(c(m,i) and wh(n,j,a)) = 0;
****                                      $149,149
 113   
 114  P_X.up(m,i,a,XR) $(c(m,i)) =1;
 115  P_X.lo(m,i,a,XR) $(c(m,i))=0;
 116  P_Y.up(m,i,a,YR) $(c(m,i))=1;
 117  P_Y.lo(m,i,a,YR) $(c(m,i))=0;
 118  P_X0.up(m,i,a,XR)$(c(m,i)) =1;
 119  P_X0.lo(m,i,a,XR)$(c(m,i)) =0;
 120  P_Y0.up(m,i,a,YR)$(c(m,i)) =1;
 121  P_Y0.lo(m,i,a,YR)$(c(m,i)) =0;
 122   
 123  *positive variables initial values
 124  T_Q.up(m,i) $(c(m,i)) = 400000;
 125  T_Q.lo(m,i) $(c(m,i)) = 0;
 126  T_Y.up(m,i) $(c(m,i)) = 400000;
 127  T_Y.lo(m,i) $(c(m,i)) = 0;
 128  T_start.up(m,i,a) $(wt(m,i,a)) = 400000;
 129  T_start.lo(m,i,a) $(wt(m,i,a)) = 0;
 130   
 131  t_AGV.up(m,i,a1,n,j,a2) $(wt(m,i,a1) and wt(n,j,a2)) = 400000;
 132  t_AGV.lo(m,i,a1,n,j,a2)$(wt(m,i,a1) and wt(n,j,a2)) = 0;
 133  X_position.up(m,i,a) $(c(m,i)) = 14 ;
 134  X_position.lo(m,i,a) $(c(m,i)) = 1;
 135  Y_position.up(m,i,a) $(c(m,i)) = 14;
 136  Y_position.lo(m,i,a) $(c(m,i)) = 1;
 137   
 138   
 139  * set the upper and lower bound of each variable, including binary variable (what a horrible language, eh??)
 140   
 141  Equations
 142          ADRP                        "AGV Dispatching and Routing Problem"
 143   
 144  *       Job assignment constraints
 145          cnstr_2(m,i)
 146          cnstr_3(m,i,li)             "C,B"
 147          cnstr_4(li)                 "B with 0 virtual node"
 148          cnstr_5(li)               â€Œ  "B with 0 virutal node"
 149          cnstr_6(m,i)                "L"
 150          cnstr_7(m,i)                "D"
 151  *
 152  **       LOcation constraints of AGV acitons
 153          cnstr_8(m,i,n,j,XR)         "C,C,XR"
 154          cnstr_9(m,i,n,j,YR)         "C,C,YR"
 155          cnstr_10(m,i,a)             "C,a"
 156          cnstr_11(m,i,a)             "C,a"
 157          cnstr_12(m,i)               "L"
 158          cnstr_13(m,i)               "D"
 159          cnstr_14(m,i,XR)            "D"
 160          cnstr_15(m,i)               "L"
GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 4
A branch and bound problem
C o m p i l a t i o n


 161          cnstr_16(m,i)               "D"
 162          cnstr_17(m,i)               "L"
 163          cnstr_18(m,i,XR)            "L"
 164          cnstr_19(m,i)               "D"
 165          cnstr_20(m, i, a, a, YR)    "WH,YR"
 166          cnstr_21(m,i,a,a,XR)        "WV,XR"
 167  *
 168  **Conflict Free Constraints
 169          cnstr_22(m,i,n,j)           "C,C"
 170          cnstr_23(m,i,a,n,j,a,YR,XR) "WH,WH,YR,XR"
 171          cnstr_24(m,i,n,j,a)         "C, WH"
 172          cnstr_25(m,i,n,j,a,a)       "C, WH"
 173          cnstr_26(n,j,a,YS,m,i,a,a)  "WH,YS,D"  !! for both alpha = 0 and alpha =  3
 174          cnstr_27(m,i,a,n,j,a,XR)    "WV, XR"
 175          cnstr_28(m,i,a, a)          "C,a"      !! alpha>2
 176   
 177  **Time Constraints
 178          cnstr_29(m,i,i)             "C,C"      !! two consecutive containers, i and i+1
 179          cnstr_30(m,i,m,i)           "psi_1"
 180          cnstr_31(m,i,m,i)           "psi_2"
 181          cnstr_32(m,i)               "D"
 182          cnstr_33(m,i)               "L"
 183          cnstr_34(m,i,m,i)           "D,L"
 184          cnstr_35(m,i,m,i)           "L,D"
 185          cnstr_36(m,i,a)             "D,a"      !!alpha=4 and 1
 186          cnstr_37(m,i,a)             "D,a"      !!alpha=1 and 1
 187          cnstr_38(m,i,a,a,n,j,a)     "WT,WT"
 188          cnstr_39(m,i,a,XR)          "C,a,XR"
 189          cnstr_40(m,i,a,YR)          "C,a,YR"
 190  *        cnstr_41(m,i,m,i,a,a)       "C,C,a,a"
 191          ;
 192   
 193   
 194  ADRP.. obj =e= T_Q('m4','i4') + G_Q('m4','i4');
 195  *T_Y('m4','i4') + G_Y('m4','i4');
 196  * > T_Y.l('m4','i4') + G_Y.l('m4','i4')
 197   
 198   
 199  **Job assinment constraints
 200  *as soon as you include conditional $(C(m,i)), you ignore virtual node!
 201  *there are many actions, having a0 as their starting. a0 is not in the formulation in the article
 202  cnstr_2(m,i) $(C(m,i) and not sameas(m,'m0') and not sameas(i,'i0')).. sum((li,n,j) $(C(n,j) or (sameas(n,'m0') and sameas(j, 'i0'))),  z(m,i,n,j,li)) =e= 1;
 203  cnstr_3(m,i,li) $(C(m,i)).. sum((n,j) $(C(n,j) or (sameas(n,'m0') and sameas(j, 'i0'))), z(m,i,n,j,li)) =e= sum((h,k) $(C(h,k) or (sameas(h,'m0') or sameas(k,'i0'))), z(m,i,h,k,li));
 204  cnstr_4(li).. sum((m,i) $(C(m,i)), z('m0', 'i0', m, i, li)) =e= 1;
 205  cnstr_5(li).. sum((m,i) $(C(m,i)), z(m, i, 'm0', 'i0', li)) =e= 1;
 206  cnstr_6(m,i) $(L(m,i)).. sum((li,n,j) $(D(n,j) or (sameas(n,'m0') and sameas(j,'i0'))), z(m,i,n,j,li)) =e= 1;
 207  cnstr_7(m,i) $(D(m,i)).. sum((li,n,j) $(L(n,j) or (sameas(n,'m0') and sameas(j,'i0'))), z(m,i,n,j,li)) =e= 1;
 208   
 209  **Location constraints of AGV acitons
 210  cnstr_8(m,i,n,j,xr) $(WT(m,i,'a4') and WH(n,j,'a0'))..  P_X(m,i,'a4',XR) $(sum(li,z.l(m,i,n,j,li)) = 1) =e= P_X(n,j,'a0',XR);  !! a bit different from the article's forumulation
 211   
 212  cnstr_9(m,i,n,j,yr) $(wt(m,i,'a4') and Wt(n,j,'a0'))..  P_Y(m,i,'a4',YR) $(sum(li,z.l(m,i,n,j,li)) = 1) =e= P_Y(n,j,'a0',YR);
 213   
GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 5
A branch and bound problem
C o m p i l a t i o n


 214  cnstr_10(m,i,a) $(WT(m,i,a)).. sum(XR, P_X(m,i,a,XR)) =e= 1;
 215  cnstr_11(m,i,a) $(wt(m,i,a)).. sum(YR, P_Y(m,i,a,YR)) =e= 1;
 216  cnstr_12(m,i) $(L(m,i) and wt(m,i,'a0')).. sum(YL, P_Y(m,i,'a0',YL)) =e= 1;
 217  cnstr_13(m,i) $(D(m,i) and wt(m,i,'a0')).. sum(YS, P_Y(m,i,'a0',YS)) =e= 1;
 218  cnstr_14(m,i,XR) $(D(m,i) and o(m,i,XR) and Wt(m,i,'a0')).. P_X(m, i,'a0',XR) =e= 1; !! You could use P_X0('m1','i1','a0','3').fx = 1 (this is used when wanting the variable to be fixed!)
 219  cnstr_15(m,i) $(L(m,i) and Wt(m,i,'a0')).. sum(XR $(A_L(m,i,XR) or A_R(m,i,XR)),sum(x_t $(A_L(m,i,XR) and (ord(x_t) >= ord(XR)) or (A_R(m,i,XR) and (ord(x_t)<=ord(XR)))) ,P_X(m,i,'a0',x_t))) =e= 1; !! this is infeasible
 220  cnstr_16(m,i) $(L(m,i) and wt(m,i,'a3')).. sum(YS, P_Y(m,i,'a3',YS)) =e= 1;
 221  cnstr_17(m,i) $(L(m,i) and wt(m,i,'a3')).. sum(YS, P_Y(m,i,'a3',YS)) =e= 1;
 222  cnstr_18(m,i,XR) $(L(m,i) and o(m,i,XR) and WV(m,i,'a3')).. P_X(m, i,'a3',XR) =e= 1;
 223  cnstr_19(m,i) $(D(m,i) and Wt(m,i,'a3')).. sum(XR $(A_L(m,i,XR) or A_R(m,i,XR)),sum(x_t $(A_L(m,i,XR) and (ord(x_t) >= ord(XR)) or (A_R(m,i,XR) and (ord(x_t)<=ord(XR)))) ,P_X(m,i,'a3',x_t))) =e= 1; !! this is infeasible
 224  cnstr_20(m, i, a1, a1_1, YR) $(Wt(m,i,a1) and Wt(m,i,a1_1) and (ord(a1_1) = ord(a1)-1)).. P_Y(m,i,a1,YR) =e= P_Y(m,i,a1_1,YR);
 225  cnstr_21(m, i, a1, a1_1, XR) $(Wt(m,i,a1) and Wt(m,i,a1_1) and (ord(a1_1) = ord(a1)-1)).. P_X(m, i, a1, XR) =e= P_X(m,i,a1_1,XR);
 226  *
 227  **Conflict Free Constraints
 228  cnstr_22(m,i,n,j) $(wt(m,i,'a4') and wt(n,j,'a1')).. U_AGV(m,i,'a4',n,j,'a1') =g= sum(li, z(m,i,n,j,li));
 229  cnstr_23(m,i,a1,n,j,a2,YR,XR) $(WH(m,i,a1) and WH(n,j,a2)).. U_AGV(m,i,a1,n,j,a2) + U_AGV(n,j,a2,m,i,a1) + 3 - P_Y(m,i,a1,YR) - P_Y(n,j,a2, YR) - sum((XR_1, a1_1, a2_1) $(ord(XR_1) <= ord(XR) and (ord(a1_1) = ord(a1)-1) and (ord(a2_1) = ord(a2)-1)),
       P_X(m,i,a1_1,XR_1) + P_X(n,j,a2,XR_1) - P_X(m,i,a1,XR_1) - P_X(n,j,a2_1,XR_1)) =g= 0;
 230  cnstr_24(m,i,n,j,a) $(C(m,i) and WH(n,j,a) and not sameas(a,'a0')).. T_Q(m,i) + G_Q(m,i) + Mnum*(1 - U_QC(m,i,n,j,a)) =g= T_start(n,j,a);
 231  cnstr_25(m,i,n,j,a1, a1_1) $(C(m,i) and WH(n,j,a1) and (ord(a1_1)=ord(a1)-1))..  T_Start(n,j,a1) + t_AGV(n,j,a1_1,n,j,a1) + Mnum*(1 - U_QC(m,i,n,j,a1) ) =g= T_Q(m,i);
 232  cnstr_26(n,j,a2,YS,m,i,a1,a2_1) $( ( (sameas(a1, 'a0') and D(m,i)) or (sameas(a1, 'a3') and L(m,i)) ) and wh(n,j,a2) and (ord(a2_1)=ord(a2)-1)).. (3 - U_QC(m,i,n,j,a2) - P_Y(m,i,a1,YS) - P_Y(n,j,a2,YS) + sum(XR $(XR.val <= o1(m,i)), P_x(n,j,a2,XR)) 
      - sum(XR $(XR.val > o1(m,i)), P_X(n,j,a2_1,XR)) ) * Mnum + T_start(n,j,a2) + t_agv(n,j,a2_1,m,i,a1) =g= T_Q(m,i) + G_Q(m,i);
 233  cnstr_27(m,i,a1,n,j,a2,XR) $(Wv(m,i,a1) and Wv(n,j,a2) and (not sameas(a1,'a0')) and (not sameas(a2,'a0'))).. U_AGV(m,i,a1,n,j,a2) + U_AGV(n,j,a2,m,i,a1) =g= P_X(m,i,a1,XR) + P_X(n,j,a2,XR) - 1;
 234  cnstr_28(m,i,a1, a1_1) $(C(m,i) and (sameas(a1,'a2') or sameas(a1,'a3') or sameas(a1,'a4') ) and (ord(a1_1) = ord(a1) - 1)).. U_AGV(m,i,a1_1,m,i,a1) =e= 1;
 235   
 236  *Time Constraints
 237  cnstr_29(m,i,i1) $(c(m,i) and (ord(i)<ord(i1))).. T_Q(m,i1) =g= T_Q(m,i) + G_Q(m,i) + S_Q;
 238  cnstr_30(m,i,n,j) $(psi_1(m,i,n,j)).. T_Q(n,j) =g= T_Q(m,i) + G_Q(m,i);
 239  cnstr_31(m,i,n,j) $(psi_2(m,i,n,j)).. T_Y(n,j) =g= T_Y(m,i) +G_Y(m,i);
 240  cnstr_32(m,i) $(D(m,i)).. T_y(m,i) =g= T_start(m,i,'a3') + t_AGV(m,i,'a2',m,i,'a3');
 241  cnstr_33(m,i) $(L(m,i)).. T_Q(m,i) =g= T_start(m,i,'a3') + t_agv(m,i,'a2',m,i,'a3');
 242  cnstr_34(m,i,n,j) $(D(m,i) and L(n,j)).. T_y(n,j) + Mnum*(1 - sum(li, z(m,i,n,j,li))) =g= T_start(m,i,'a4') + t_agv(m,i,'a3',m,i,'a4');
 243  cnstr_35(m,i,n,j) $(L(m,i) and D(n,j)).. T_Q(n,j) + Mnum*(1 - sum(li, z(m,i,n,j,li))) =g= T_start(m,i,'a4') + t_agv(m,i,'a3',m,i,'a4');
 244  cnstr_36(m,i,a) $( (D(m,i) and sameas(a,'a4')) or (L(m,i) and sameas(a,'a1')) ).. T_start(m,i,a) =g= t_y(m,i) + G_y(m,i);
 245  cnstr_37(m,i,a) $( (D(m,i) and sameas(a,'a1')) or (L(m,i) and sameas(a,'a4')) ).. T_start(m,i,a) =g= t_Q(m,i) + G_Q(m,i);
 246  cnstr_38(m,i,a1,a1_1,n,j,a2) $(WT(m,i,a1) and wt(n,j,a2) and (ord(a1_1) = ord(a1)-1)).. T_start(n,j,a2) + Mnum*(1-U_AGV(m,i,a1,n,j,a2)) =g= t_start(m,i,a1) + t_AGV(m,i,a1_1,m,i,a1);
 247   
 248  cnstr_39(m,i,a,XR) $(Wt(m,i,a))..  x_position(m,i,a)  =e= ord(XR) $(P_x.l(m,i,a,XR) = 1); !! this and cnstr_40 are not really constraints, but only `.l` relations!
 249   
 250  cnstr_40(m,i,a,YR) $(Wt(m,i,a)).. y_position(m,i,a) =e= ord(YR)  $(P_y.l(m,i,a,YR) = 1); !! This constraint is similar to the declaration of cnstr_8 and cnstr_9
 251   
 252   
 253   
 254  t_agv.l(m,i,a1,n,j,a2) $(wt(m,i,a1) and wt(n,j,a2)) = (abs(x_position.l(m,i,a1) - x_position.l(n,j,a2)) + abs(Y_position.l(m,i,a1) > y_position.l(n,j,a2)))/v; !! what?!? :)) values wouldn't be updated each iteration!
 255   
 256   
 257  *
 258  Model ConflictFreeSch /all/ ;
 259   
 260  Solve ConflictFreeSch using mip minimizing obj;
****                                                $257
 261   
 262  *Display x.l, x.m ;
GAMS 25.1.2  r67455 Released Aug  1, 2018 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 01/01/14 12:41:43 Page 6
A branch and bound problem
Error Messages


149  Uncontrolled set entered as constant
257  Solve statement not checked because of previous errors

**** 3 ERROR(S)   0 WARNING(S)


COMPILATION TIME     =        0.000 SECONDS      3 MB  25.1.2 r67455 WEX-WEI


USER: EWEPA 2015 Eval License                        S150430/0001AO-GEN
      The 14th European Workshop on Efficiency and Productivity DC11746
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Asus\Projects\FrequentlyUsedRepos\AGV-Project\Thesis\Implementation\BBAPP.gms
Output     C:\Users\Asus\Projects\FrequentlyUsedRepos\AGV-Project\Thesis\Implementation\model_output.lst

**** USER ERROR(S) ENCOUNTERED
